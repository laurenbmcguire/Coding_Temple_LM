[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "Card",
        "kind": 6,
        "importPath": "blackjackadd",
        "description": "blackjackadd",
        "peekOfCode": "class Card:\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n    def __str__(self):\n        return self.rank + ' of ' + self.suit\nclass Deck:\n    def __init__(self):\n        self.deck = []  \n        for suit in suits:",
        "detail": "blackjackadd",
        "documentation": {}
    },
    {
        "label": "Deck",
        "kind": 6,
        "importPath": "blackjackadd",
        "description": "blackjackadd",
        "peekOfCode": "class Deck:\n    def __init__(self):\n        self.deck = []  \n        for suit in suits:\n            for rank in ranks:\n                self.deck.append(Card(suit, rank))\n    def __str__(self):\n        deck_comp = '' \n        for card in self.deck:\n            deck_comp += '\\n' + card.__str__() ",
        "detail": "blackjackadd",
        "documentation": {}
    },
    {
        "label": "Hand",
        "kind": 6,
        "importPath": "blackjackadd",
        "description": "blackjackadd",
        "peekOfCode": "class Hand:\n    def __init__(self):\n        self.cards = []  \n        self.value = 0   \n        self.aces = 0    \n    def add_card(self,card):\n        self.cards.append(card)\n        self.value += values[card.rank]\n        if card.rank == 'Ace':\n            self.aces += 1",
        "detail": "blackjackadd",
        "documentation": {}
    },
    {
        "label": "Chips",
        "kind": 6,
        "importPath": "blackjackadd",
        "description": "blackjackadd",
        "peekOfCode": "class Chips:\n    def __init__(self):\n        self.total = 100  \n        self.bet = 0\n    def win_bet(self):\n        self.total += self.bet\n    def lose_bet(self):\n        self.total -+ self.bet\ndef take_bet(chips):\n    while True:",
        "detail": "blackjackadd",
        "documentation": {}
    },
    {
        "label": "take_bet",
        "kind": 2,
        "importPath": "blackjackadd",
        "description": "blackjackadd",
        "peekOfCode": "def take_bet(chips):\n    while True:\n        try:\n            chips.bet = int(input('How many chips would you liek to bet?  '))\n        except ValueError:\n            print(\"Sorry, a bet must be an integer!\")\n        else:\n            if chips.bet > chips.total:\n                print('Sorry, your bet cannot exceed {} '.format(chips.total))\n            else:",
        "detail": "blackjackadd",
        "documentation": {}
    },
    {
        "label": "hit",
        "kind": 2,
        "importPath": "blackjackadd",
        "description": "blackjackadd",
        "peekOfCode": "def hit(deck,hand):\n    hand.add_card(deck.deal())\n    hand.adjust_for_ace()\ndef hit_or_stand(deck,hand):\n    global playing\n    while True:\n        x = input(\"Would you like to Hit or Stand? Enter 'h' or 's'\")\n        if x[0].lower() == 'h':\n            hit(deck,hand)  \n        elif x[0].lower() == 's':",
        "detail": "blackjackadd",
        "documentation": {}
    },
    {
        "label": "hit_or_stand",
        "kind": 2,
        "importPath": "blackjackadd",
        "description": "blackjackadd",
        "peekOfCode": "def hit_or_stand(deck,hand):\n    global playing\n    while True:\n        x = input(\"Would you like to Hit or Stand? Enter 'h' or 's'\")\n        if x[0].lower() == 'h':\n            hit(deck,hand)  \n        elif x[0].lower() == 's':\n            print(\"Player stands. Dealer is playing.\")\n            playing = False\n        else:",
        "detail": "blackjackadd",
        "documentation": {}
    },
    {
        "label": "show_some",
        "kind": 2,
        "importPath": "blackjackadd",
        "description": "blackjackadd",
        "peekOfCode": "def show_some(player,dealer):\n    print(\"\\nDealer's Hand\")\n    print(\"<card hidden>\")\n    print(' ', dealer.cards[1])\n    print(\"\\nPlayer's Hand: \", *player.cards, sep= '\\n')\ndef show_all(player,dealer):\n    print(\"\\nDealer's Hand:\", *dealer.cards, sep=\"\\n\")\n    print(\"Dealer's Hand =\",dealer.value)\n    print(\"\\nPlayer's Hand: \", *player.cards, sep= '\\n')\n    print(\"Player's Hand = \", player.value)",
        "detail": "blackjackadd",
        "documentation": {}
    },
    {
        "label": "show_all",
        "kind": 2,
        "importPath": "blackjackadd",
        "description": "blackjackadd",
        "peekOfCode": "def show_all(player,dealer):\n    print(\"\\nDealer's Hand:\", *dealer.cards, sep=\"\\n\")\n    print(\"Dealer's Hand =\",dealer.value)\n    print(\"\\nPlayer's Hand: \", *player.cards, sep= '\\n')\n    print(\"Player's Hand = \", player.value)\ndef player_busts(player,dealer,chips):\n    print(\"Player busts!\")\n    chips.lose_bet()\ndef player_wins(player,dealer,chips):\n    print(\"Player wins!\")",
        "detail": "blackjackadd",
        "documentation": {}
    },
    {
        "label": "player_busts",
        "kind": 2,
        "importPath": "blackjackadd",
        "description": "blackjackadd",
        "peekOfCode": "def player_busts(player,dealer,chips):\n    print(\"Player busts!\")\n    chips.lose_bet()\ndef player_wins(player,dealer,chips):\n    print(\"Player wins!\")\n    chips.win_bet()\ndef dealer_busts(player,dealer,chips):\n    print(\"Dealer busts!\")\n    chips.win_bet()\ndef dealer_wins(player,dealer,chips):",
        "detail": "blackjackadd",
        "documentation": {}
    },
    {
        "label": "player_wins",
        "kind": 2,
        "importPath": "blackjackadd",
        "description": "blackjackadd",
        "peekOfCode": "def player_wins(player,dealer,chips):\n    print(\"Player wins!\")\n    chips.win_bet()\ndef dealer_busts(player,dealer,chips):\n    print(\"Dealer busts!\")\n    chips.win_bet()\ndef dealer_wins(player,dealer,chips):\n    print(\"Dealer wins!\")\n    chips.lose_bet()\ndef push(player,dealer):",
        "detail": "blackjackadd",
        "documentation": {}
    },
    {
        "label": "dealer_busts",
        "kind": 2,
        "importPath": "blackjackadd",
        "description": "blackjackadd",
        "peekOfCode": "def dealer_busts(player,dealer,chips):\n    print(\"Dealer busts!\")\n    chips.win_bet()\ndef dealer_wins(player,dealer,chips):\n    print(\"Dealer wins!\")\n    chips.lose_bet()\ndef push(player,dealer):\n    print(\"Dealer and Player tie! It's a push.\")    \nwhile True:\n    print(\"Welcome to my kickass Blackjack game.\")",
        "detail": "blackjackadd",
        "documentation": {}
    },
    {
        "label": "dealer_wins",
        "kind": 2,
        "importPath": "blackjackadd",
        "description": "blackjackadd",
        "peekOfCode": "def dealer_wins(player,dealer,chips):\n    print(\"Dealer wins!\")\n    chips.lose_bet()\ndef push(player,dealer):\n    print(\"Dealer and Player tie! It's a push.\")    \nwhile True:\n    print(\"Welcome to my kickass Blackjack game.\")\n    deck = Deck()\n    deck.shuffle()\n    player_hand = Hand()",
        "detail": "blackjackadd",
        "documentation": {}
    },
    {
        "label": "push",
        "kind": 2,
        "importPath": "blackjackadd",
        "description": "blackjackadd",
        "peekOfCode": "def push(player,dealer):\n    print(\"Dealer and Player tie! It's a push.\")    \nwhile True:\n    print(\"Welcome to my kickass Blackjack game.\")\n    deck = Deck()\n    deck.shuffle()\n    player_hand = Hand()\n    player_hand.add_card(deck.deal())\n    player_hand.add_card(deck.deal())\n    dealer_hand = Hand()",
        "detail": "blackjackadd",
        "documentation": {}
    },
    {
        "label": "suits",
        "kind": 5,
        "importPath": "blackjackadd",
        "description": "blackjackadd",
        "peekOfCode": "suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')\nranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')\nvalues = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10,\n         'Queen':10, 'King':10, 'Ace':11}\nplaying = True\nclass Card:\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n    def __str__(self):",
        "detail": "blackjackadd",
        "documentation": {}
    },
    {
        "label": "ranks",
        "kind": 5,
        "importPath": "blackjackadd",
        "description": "blackjackadd",
        "peekOfCode": "ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')\nvalues = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10,\n         'Queen':10, 'King':10, 'Ace':11}\nplaying = True\nclass Card:\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n    def __str__(self):\n        return self.rank + ' of ' + self.suit",
        "detail": "blackjackadd",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "blackjackadd",
        "description": "blackjackadd",
        "peekOfCode": "values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10,\n         'Queen':10, 'King':10, 'Ace':11}\nplaying = True\nclass Card:\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n    def __str__(self):\n        return self.rank + ' of ' + self.suit\nclass Deck:",
        "detail": "blackjackadd",
        "documentation": {}
    },
    {
        "label": "playing",
        "kind": 5,
        "importPath": "blackjackadd",
        "description": "blackjackadd",
        "peekOfCode": "playing = True\nclass Card:\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n    def __str__(self):\n        return self.rank + ' of ' + self.suit\nclass Deck:\n    def __init__(self):\n        self.deck = []  ",
        "detail": "blackjackadd",
        "documentation": {}
    },
    {
        "label": "room_counts",
        "kind": 5,
        "importPath": "module",
        "description": "module",
        "peekOfCode": "room_counts = int(input('How many rooms does the floor have?'))\ntotal=0\nfor i in range(room_counts):\n    length=float(input('room #%s length?'%(i+1)))\n    width=float(input('room #%s width?'%(i+1)))\n    total +=length*width\nprint ('total is ',total)\n#question2\nradius = float(input(\"Enter the radius of the circle : \"))\ncircumference = 2 * math.pi * radius",
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "radius",
        "kind": 5,
        "importPath": "module",
        "description": "module",
        "peekOfCode": "radius = float(input(\"Enter the radius of the circle : \"))\ncircumference = 2 * math.pi * radius\nprint(\"Circumference of the circle is : %.2f\" % circumference)",
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "circumference",
        "kind": 5,
        "importPath": "module",
        "description": "module",
        "peekOfCode": "circumference = 2 * math.pi * radius\nprint(\"Circumference of the circle is : %.2f\" % circumference)",
        "detail": "module",
        "documentation": {}
    }
]