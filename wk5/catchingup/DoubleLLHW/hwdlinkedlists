class Node:
    def __init__(self, value, next=None, previous=None):
        self.value = value
        self.nextNode = next
        self.previousNode = previous  
    def get_next_node(self):
        return self.next_node
    def get_prev_node(self):  
        return self.prviousNode
    def get_value(self):
        return self.value
    def set_value(self, new_value):
        self.value = new_value
    def set_next_node(self, node):
        self.next_node = node
    def set_prev_node(self, previous):  
        self.prviousNode = previous
    def __repr__(self):
        return f'<Node: {self.value}>'
class LinkedList:
    def __init__(self, root=None):
        self.root = root
        self.size = 0

    def add(self, number):
        newNode = Node(number, self.root)       
        if self.root: 
            self.root.set_prev_node(newNode)
        self.root = newNode
        self.size += 1                          

    def remove(self, number):
        current_node = self.root
        while current_node:
            if current_node.get_value() == number:
                next = current_node.get_next_node()
                previous = current_node.get_prev_node()
                if next:  
                    next.set_prev_node(previous)
                if previous: 
                    previous.set_next_node(next)
                else:
                    self.root = current_node
                self.size = self.size - 1
                if prev_node:
                    prev_node.set_next_node(current_node.get_next_node())
                else:
                    self.root = current_node.get_next_node()
                self.size -= 1
                return 'removed'
            else:
                prev_node = current_node
                current_node = current_node.get_next_node()
        return 'not found'
    def find(self, number):
        current_node = self.root
        prev_node = None
        while current_node:
            if current_node.get_value() == number:
                return True
            else:
                current_node = current_node.get_next_node()
        return False
    def get_root(self):
        return self.root
    def get_size(self):
        return self.size
